services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: optuna
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d optuna']
      interval: 5s
      timeout: 5s
      retries: 10

  airflow:
    build:
      context: .
      dockerfile: docker/airflow/dockerfile
    user: root
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://admin:admin@postgres:5432/airflow_meta'
      OPTUNA_STORAGE: 'postgresql+psycopg2://admin:admin@postgres:5432/optuna'
      MLFLOW_TRACKING_URI: 'file:/opt/airflow/mlruns'
      JAVA_HOME: /usr/lib/jvm/default-java
      PYTHONPATH: /opt/airflow
      FORCE_DOWNLOAD: '0'
      FORCE_PROCESS: '0'
      FORCE_TRAIN: '0'
      # Оптимизация памяти
      MEMORY_WARNING_MB: '2048'
      TFIDF_MAX_FEATURES_MIN: '500'
      TFIDF_MAX_FEATURES_MAX: '2000'
      FORCE_SVD_THRESHOLD_MB: '1500'
      OPTUNA_N_TRIALS: '20'
      PER_CLASS_LIMIT: '15000'
      # Убираем избыточные логи
      GIT_PYTHON_REFRESH: 'quiet'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts:ro
      - ./data/raw:/opt/airflow/data/raw
      - ./data/processed:/opt/airflow/data/processed
      - ./model:/opt/airflow/model
      - mlruns_data:/opt/airflow/mlruns
      - ${USERPROFILE}/.kaggle/kaggle.json:/home/airflow/.kaggle/kaggle.json:ro
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    command: >-
      bash -c "set -e;
      airflow db migrate;
      airflow users list | grep -q admin@example.com || airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com;
      airflow webserver -p 8080 &
      echo 'Инициализация Airflow...';
      for i in $(seq 1 30); do curl -sSf http://localhost:8080/health || true; sleep 2; done;
      echo 'Airflow UI: http://localhost:8080';
      airflow scheduler"
    deploy:
      resources:
        limits:
          memory: 6g
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  api:
    build:
      context: .
      dockerfile: docker/api/dockerfile
    image: kindle_api
    depends_on:
      airflow:
        condition: service_started
    ports:
      - '8000:8000'
    volumes:
      - ./model:/app/model:ro
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL

volumes:
  pgdata:
  mlruns_data:
